// <copyright file="WorkFlowActivityBase.cs" company="">
// Copyright (c) 2020 All Rights Reserved
// </copyright>
// <author></author>
// <date>06.06.2020 15:08:38</date>
// <summary>Implements the WorkFlowActivityBase Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Workflow;
using System.Activities;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Sdk.Messages;

namespace ETI.SRE.PromoProductsHandler
{
    public class InputOutputParameters : CodeActivity
    {

        // Input Parameter – Contact’s Company will be passed to this Parameter FROM Workflow
        [RequiredArgument]
        [Input("Batch Size")]
        public InArgument<int> batchSize { get; set; }

        // Output Parameter – Matched Account will be passed back TO Workflow

        // Output Parameter – Boolean flag will be passed TO Workflow
        [Output("Records left?")]
        public OutArgument<bool> isMoreRecords { get; set; }

        protected override void Execute(CodeActivityContext executionContext)
        {

            var tracingService = executionContext.GetExtension<ITracingService>();
            var context = executionContext.GetExtension<IWorkflowContext>();
            var serviceFactory = executionContext.GetExtension<IOrganizationServiceFactory>();
            var service = serviceFactory.CreateOrganizationService(context.UserId);
            var batch = batchSize.Get(executionContext);
            if (batch > 4999)
                batch = 4999;
            isMoreRecords.Set(executionContext, true);
            try
            {

                tracingService.Trace("start of download: " + DateTime.Now);

              

                var query = new QueryExpression
                {
                    EntityName = "eti_accountproduct",
                    ColumnSet = new ColumnSet("eti_promoexpires", "eti_ratetoset", "eti_producttoswap", "eti_keepcontent"),

                   
                    Criteria =
                {
                  FilterOperator = LogicalOperator.And,
                  Conditions =
                   {
            
                    new ConditionExpression
                      {
                        AttributeName = "eti_promoexpires",
                        Operator = ConditionOperator.OnOrBefore,
                        Values = {DateTime.Now.AddDays(-1) }
                       }
                        }
                    }
                };
                query.PageInfo = new PagingInfo();
                query.PageInfo.Count = batch; // or 50, or whatever
                query.PageInfo.PageNumber = 1;
                tracingService.Trace("start of composing: " + DateTime.Now);
                var result = service.RetrieveMultiple(query).Entities;
                tracingService.Trace("end of download: " + DateTime.Now);
                //define if another loop is required
                if (result.Count < batch)
                    isMoreRecords.Set(executionContext, false);
                var multipleRequest = new ExecuteMultipleRequest()
                {
                    // Assign settings that define execution behavior: continue on error, return responses.
                    Settings = new ExecuteMultipleSettings()
                    {
                        ContinueOnError = true,
                        ReturnResponses = true
                    },
                    // Create an empty organization request collection.
                    Requests = new OrganizationRequestCollection()
                };

                foreach (Entity en in result)
                {
                    //if promo has product to swap
                    if(en.Attributes.Contains("eti_keepcontent") && en.GetAttributeValue<bool>("eti_keepcontent") == true)
                    {
                        //set to pending change
                        en.Attributes.Add("eti_productstate", new OptionSetValue(964820002));
                        //swap product
                        var origProduct = en.GetAttributeValue<EntityReference>("eti_producttoswap");

                        en.Attributes.Add("eti_product", en.GetAttributeValue<EntityReference>("eti_producttoswap"));
                        en.Attributes["eti_producttoswap"] = origProduct;
                        //eti_productsswapped
                        en.Attributes["eti_productsswapped"] = true;

                        //update price
                        en.Attributes.Add("eti_newrate", en.GetAttributeValue<Money>("eti_ratetoset"));
                    }
                    else
                    {
                        //set to pending remove
                        en.Attributes.Add("eti_productstate", new OptionSetValue(964820003));
                        en.Attributes["eti_producttoswap"] = null;
                    }
                    //nulify fields
                    en.Attributes["eti_promoexpires"] = null;
                    en.Attributes["eti_ratetoset"] = null;
                   
                    en.Attributes["eti_keepcontent"] = true;
                    UpdateRequest updateRequest = new UpdateRequest { Target = en };
                    multipleRequest.Requests.Add(updateRequest);
                }
                tracingService.Trace("end of composing: " + DateTime.Now);
                //create executemultiplerequest
                tracingService.Trace("start of upload: " + DateTime.Now);

                ExecuteMultipleResponse responseWithResults =
                    (ExecuteMultipleResponse)service.Execute(multipleRequest);

                tracingService.Trace("end of upload: " + DateTime.Now);
            }
            catch (Exception ex)
            {
                tracingService.Trace("Error in CreateOrUpdateAccountActivity – " + ex.Message);
                throw;
            }
        }

    }
}
