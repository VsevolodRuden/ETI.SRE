// <copyright file="PluginBase.cs" company="">
// Copyright (c) 2020 All Rights Reserved
// </copyright>
// <author></author>
// <date>20.05.2020 20:36:44</date>
// <summary>Implements the PluginBase Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;

namespace ETI.SRE.SyncAccountBundleProductStatuses
{
    /// <summary>
    /// Base class for all plug-in classes.
    /// </summary>    
    /// 

    public class AssignDefaultBundleProducts : IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            ProductValidatior.DoJob(serviceProvider);
        }
    }




    public static class ProductValidatior
    {
        public static void DoJob(IServiceProvider serviceProvider)
        {
            // var tracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));
            var context = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));
            var serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
            IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);

            if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
            {
                Entity entity = (Entity)context.InputParameters["Target"];

                //entity = service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(new string[] { "eti_account", "eti_product" }));
                try
                {
                    Entity preImage = (Entity)context.PreEntityImages["preImage"];
                    OptionSetValue prevPS = preImage.GetAttributeValue<OptionSetValue>("eti_productstate");
                    OptionSetValue ps;
                    if (entity.Attributes.ContainsKey("eti_productstate"))
                    {
                        ps = entity.GetAttributeValue<OptionSetValue>("eti_productstate");
                        var query = new QueryExpression
                        {
                            EntityName = "eti_accountproduct",
                            ColumnSet = new ColumnSet("eti_oldrate", "eti_newrate", "eti_rate", "eti_newquantity", "eti_oldquantity", "eti_quantity", "eti_producttoswap", "eti_effectivedate"),
                            Criteria = new FilterExpression
                            {
                                FilterOperator = LogicalOperator.And
                            }
                        };
                        var expression2 = new ConditionExpression("eti_parentbundle", ConditionOperator.Equal, entity.Id);

                        query.Criteria.Conditions.Add(expression2);

                        EntityCollection entities = service.RetrieveMultiple(query);
                        Money sum = new Money(0);
                        if (entities.Entities.Count > 0)
                        {

                            if (prevPS.Value == 964820000)
                            {
                                if (ps.Value == 964820005 || ps.Value == 964820003)
                                {
                                    foreach (Entity en in entities.Entities)
                                    {
                                        if (en.Attributes.Contains("eti_rate"))
                                            en["eti_newrate"] = en["eti_rate"];
                                        if (en.Attributes.Contains("eti_quantity"))
                                            en["eti_newquantity"] = en["eti_quantity"];
                                        Money localAmount = new Money(en.GetAttributeValue<Money>("eti_rate").Value * en.GetAttributeValue<Int32>("eti_quantity"));
                                        en["eti_amount"] = localAmount;
                                        sum.Value += localAmount.Value;
                                        service.Update(en);

                                    }
                                    entity["eti_rate"] = sum;
                                }
                            }
                            else if (ps.Value == 964820000)
                            {
                                if (prevPS.Value == 964820002 || prevPS.Value == 964820001)
                                {
                                    foreach (Entity en in entities.Entities)
                                    {
                                        if (en.Attributes.Contains("eti_newrate"))
                                            en["eti_rate"] = en["eti_newrate"];
                                        if (en.Attributes.Contains("eti_newquantity"))
                                            en["eti_quantity"] = en["eti_newquantity"];
                                        Money localAmount = new Money(en.GetAttributeValue<Money>("eti_rate").Value * en.GetAttributeValue<Int32>("eti_quantity"));
                                        en["eti_amount"] = localAmount;
                                        sum.Value += localAmount.Value;
                                        service.Update(en);
                                    }
                                    entity["eti_rate"] = sum;
                                }
                            }




                        }
                        else
                        {
                            if (preImage.Attributes.Contains("eti_producttoswap") && preImage.Attributes["eti_producttoswap"] != null)
                            {
                                if (ps.Value == 964820000 && prevPS.Value == 964820001)
                                {
                                    Entity originalProduct = service.Retrieve("product", preImage.GetAttributeValue<EntityReference>("eti_product").Id, new ColumnSet("eti_promoexpiretype", "eti_promoexpirevalue", "eti_expirationdate", "eti_expirationtype"));
                                    int expirevalue = originalProduct.GetAttributeValue<int>("eti_promoexpirevalue");
                                    DateTime expirationDate = preImage.GetAttributeValue<DateTime>("eti_effectivedate");
                                    if (originalProduct.GetAttributeValue<bool>("eti_expirationtype"))
                                    {

                                        entity["eti_promoexpires"] = originalProduct["eti_expirationdate"];
                                    }
                                    else
                                    {
                                        switch (originalProduct.GetAttributeValue<OptionSetValue>("eti_promoexpiretype").Value)
                                        {
                                            case 964820000:
                                                expirationDate = expirationDate.AddDays(expirevalue);
                                                break;
                                            case 964820001:
                                                expirationDate = expirationDate.AddDays(expirevalue * 7);
                                                break;
                                            case 964820002:
                                                expirationDate = expirationDate.AddMonths(expirevalue);
                                                break;
                                            case 964820003:
                                                expirationDate = expirationDate.AddYears(expirevalue);
                                                break;
                                            case 964820004:
                                                expirationDate = expirationDate.AddMonths(expirevalue);
                                                break;
                                        }
                                        entity["eti_promoexpires"] = expirationDate;
                                    }
                                }
                            }
                        }

                    }




                }
                catch (Exception ex)
                {
                    throw new InvalidPluginExecutionException(ex.Message);
                }

            }

        }
    }
}