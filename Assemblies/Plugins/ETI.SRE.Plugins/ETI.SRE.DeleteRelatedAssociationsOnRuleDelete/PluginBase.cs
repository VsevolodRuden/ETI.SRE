// <copyright file="PluginBase.cs" company="">
// Copyright (c) 2020 All Rights Reserved
// </copyright>
// <author></author>
// <date>05.07.2020 01:14:54</date>
// <summary>Implements the PluginBase Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

namespace ETI.SRE.DeleteRelatedAssociationsOnRuleDelete
{
    /// <summary>
    /// Base class for all plug-in classes.
    /// </summary>    
    public class DeleteRelatedAssociationsOnRuleDelete : IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            BulkDeleteAssciations.DoJob(serviceProvider);
        }
    }




    public static class BulkDeleteAssciations
    {
        public static void DoJob(IServiceProvider serviceProvider)
        {
            // var tracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));
            var context = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));
            var serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
            IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);

            if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
            {
                Entity entity = (Entity)context.InputParameters["Target"];

                //entity = service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(new string[] { "eti_account", "eti_product" }));
                try
                {
                    var associationsQuery = new QueryExpression
                    {
                        EntityName = "productassociation",
                        ColumnSet = new ColumnSet("eti_productassociationruleid"),
                        Criteria = new FilterExpression
                        {
                            Conditions =
                   {
                      new ConditionExpression
                       {
                         AttributeName = "eti_productassociationruleid",
                         Operator = ConditionOperator.Equal,
                        Values = { entity.Id }
                         }
                     }
                        }
                    };
                    var results = service.RetrieveMultiple(associationsQuery).Entities;
                    DataCollection<EntityReference> dataToDelete = null;
                    foreach (Entity en in results)
                    {
                        dataToDelete.Add(en.ToEntityReference());
                    }
                }
                catch (Exception ex)
                {
                    throw new InvalidPluginExecutionException("Unable to delete related associations!");
                }

            }
        }
        public static void BulkDelete(IOrganizationService service, DataCollection<EntityReference> entityReferences)
        {

            // Create an ExecuteMultipleRequest object.
            var multipleRequest = new ExecuteMultipleRequest()
            {
                // Assign settings that define execution behavior: continue on error, return responses. 
                Settings = new ExecuteMultipleSettings()
                {
                    ContinueOnError = false,
                    ReturnResponses = true
                },
                // Create an empty organization request collection.
                Requests = new OrganizationRequestCollection()
            };

            // Add a DeleteRequest for each entity to the request collection.
            foreach (var entityRef in entityReferences)
            {
                DeleteRequest deleteRequest = new DeleteRequest { Target = entityRef };
                multipleRequest.Requests.Add(deleteRequest);
            }

            // Execute all the requests in the request collection using a single web method call.
            ExecuteMultipleResponse multipleResponse = (ExecuteMultipleResponse)service.Execute(multipleRequest);
        }
    }
}