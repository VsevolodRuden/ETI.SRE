// <copyright file="PluginBase.cs" company="">
// Copyright (c) 2020 All Rights Reserved
// </copyright>
// <author></author>
// <date>05.07.2020 17:14:06</date>
// <summary>Implements the PluginBase Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;

namespace ETI.SRE.UpdateBundlePrice
{
    /// <summary>
    /// Base class for all plug-in classes.
    /// </summary>    
    public  class UpdateBundlePrice : IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            PriceRecalculator.DoJob(serviceProvider);
        }
    }




    public static class PriceRecalculator
    {
        public static void DoJob(IServiceProvider serviceProvider)
        {
            // var tracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));
            var context = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));
            var serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
            IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);

            if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
            {
                ITracingService tracingService =
                (ITracingService)serviceProvider.GetService(typeof(ITracingService));
                Entity entity = (Entity)context.InputParameters["Target"];

                //entity = service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(new string[] { "eti_account", "eti_product" }));
                try
                {
                    tracingService.Trace($"start");
                    var result = service.Retrieve("productassociation", entity.Id, new Microsoft.Xrm.Sdk.Query.ColumnSet("eti_productassociationrule", "productid"));

                    //get pricelist
                    var product = service.Retrieve("product", result.GetAttributeValue<EntityReference>("productid").Id, new ColumnSet("eti_associatedpricelist"));

                    //get pricelevel
                    var pricelevelQuery = new QueryExpression
                    {
                        EntityName = "productpricelevel",
                        ColumnSet = new ColumnSet("amount"),
                        Criteria = new FilterExpression
                        {
                            Conditions =
                   {
                      new ConditionExpression
                       {
                         AttributeName = "productid",
                         Operator = ConditionOperator.Equal,
                        Values = { product.Id }
                         },
                      new ConditionExpression
                       {
                         AttributeName = "pricelevelid",
                         Operator = ConditionOperator.Equal,
                        Values = { product.GetAttributeValue<EntityReference>("eti_associatedpricelist").Id }
                         }
                     }
                        }
                    };
                    var pricelevel =  service.RetrieveMultiple(pricelevelQuery).Entities[0];
                    tracingService.Trace($"pl {pricelevel.Id}");



                    var parentId = result.GetAttributeValue<EntityReference>("productid").Id;
                    var associationsQuery = new QueryExpression
                    {
                        EntityName = "productassociation",
                        ColumnSet = new ColumnSet("eti_productassociationrule", "eti_price"),
                        Criteria = new FilterExpression
                        {
                            Conditions =
                   {
                      new ConditionExpression
                       {
                         AttributeName = "eti_requirementmode",
                         Operator = ConditionOperator.Equal,
                        Values = { 964820000 }
                         },
                       new ConditionExpression
                       {
                         AttributeName = "productid",
                         Operator = ConditionOperator.Equal,
                        Values = { parentId }
                         }

                     }
                        }
                    };
                    var results = service.RetrieveMultiple(associationsQuery).Entities;
                    tracingService.Trace($"found {results.Count}");
                    decimal sum = 0;
                    foreach (Entity en in results)
                    {
                        sum +=en.GetAttributeValue<Money>("eti_price").Value;
                        //calculate sum
                    }
                    tracingService.Trace($"sum {sum}");
                    pricelevel.Attributes["amount"] = new Money(sum);
                    service.Update(pricelevel);

                }
                catch (Exception ex)
                {
                    throw new InvalidPluginExecutionException(ex.Message);
                }
            }
        }
    }
}