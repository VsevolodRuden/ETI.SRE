// <copyright file="PluginBase.cs" company="">
// Copyright (c) 2020 All Rights Reserved
// </copyright>
// <author></author>
// <date>29.04.2020 12:45:07</date>
// <summary>Implements the PluginBase Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;

namespace ETI.SRE.BundleAssociationValidation
{
    /// <summary>
    /// Base class for all plug-in classes.
    /// </summary>    
    public class ValidateBundleAssociation : IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            try
            {
                Handler.DoJob(serviceProvider);
            }
            catch (Exception ex)
            {
                throw new InvalidPluginExecutionException(ex.Message);
            }
        }
    }

    public static class Handler
    {
        public static void DoJob(IServiceProvider serviceProvider)
        {
            var context = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));
            var serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
            IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);

            if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
            {
                Entity entity = (Entity)context.InputParameters["Target"];

                //entity = service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(new string[] { "eti_account", "eti_product" }));
                try
                {
                   
                    //get PL id
                    var currPLId = entity.GetAttributeValue<EntityReference>("pricelevelid").Id;
                    Entity product = service.Retrieve("product", entity.GetAttributeValue<EntityReference>("productid").Id, new Microsoft.Xrm.Sdk.Query.ColumnSet("eti_associatedpricelist", "productstructure"));
                    if (product.GetAttributeValue<OptionSetValue>("productstructure").Value != 3)
                        return;
                    var associatedPLId = product.GetAttributeValue<EntityReference>("eti_associatedpricelist").Id;
                    if (currPLId != associatedPLId)
                        throw new DuplicatePriceListAssignmentException();
                    //get base product
                    //compare ID's
                    //if different throw



                }
                catch (DuplicatePriceListAssignmentException ex)
                {
                    throw new InvalidPluginExecutionException($"Can't assign Bundle because it's already assigned to different pricelist");
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }
    }
    public class DuplicatePriceListAssignmentException : Exception
    {

    }
}