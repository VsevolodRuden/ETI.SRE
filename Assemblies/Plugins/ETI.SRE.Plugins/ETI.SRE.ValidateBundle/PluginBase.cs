// <copyright file="PluginBase.cs" company="">
// Copyright (c) 2020 All Rights Reserved
// </copyright>
// <author></author>
// <date>05.05.2020 13:44:10</date>
// <summary>Implements the PluginBase Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;

namespace ETI.SRE.ValidateBundle
{
    /// <summary>
    /// Base class for all plug-in classes.
    /// </summary>    
    /// <summary>
    /// Base class for all plug-in classes.
    /// </summary>    
    public class ValidateBundle : IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            Handler.DoBundleJob(serviceProvider);
        }
    }
    public class ValidateBundleAssociation : IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            Handler.DoAssociationJob(serviceProvider);
        }
    }


    public static class Handler
    {
        public static void DoBundleJob(IServiceProvider serviceProvider)
        {
            var context = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));
            var serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
            IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);
            ITracingService tracingService =
                (ITracingService)serviceProvider.GetService(typeof(ITracingService));
            if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
            {
                Entity entity = (Entity)context.InputParameters["Target"];

                //entity = service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(new string[] { "eti_account", "eti_product" }));
                try
                {
                    int min = 0, max = 0;
                    tracingService.Trace($"start");
                    tracingService.Trace($"{min} & {max}");
                 
                    if (entity.Attributes.ContainsKey("eti_min") && entity.Attributes.ContainsKey("eti_max"))
                    {
                        tracingService.Trace($"Both attributes");
                        min = entity.GetAttributeValue<int>("eti_min");
                        max = entity.GetAttributeValue<int>("eti_max");
                        tracingService.Trace($"{min} & {max}");
                        if (min > max)
                            throw new ValueException();
                    }
                    if(entity.Attributes.ContainsKey("eti_min"))
                    {
                        tracingService.Trace($"min attributes");
                        min = entity.GetAttributeValue<int>("eti_min");
                        var associationsQuery = new QueryExpression
                        {
                            EntityName = "productassociation",
                            ColumnSet = new ColumnSet("eti_productassociationrule", "eti_requirementmode"),
                            Criteria = new FilterExpression
                            {
                                Conditions =
                   {
                      new ConditionExpression
                       {
                         AttributeName = "eti_productassociationrule",
                         Operator = ConditionOperator.Equal,
                        Values = { entity.Id }
                         },
                      new ConditionExpression
                       {
                         AttributeName = "eti_requirementmode",
                         Operator = ConditionOperator.NotEqual,
                        Values = { 964820000 }
                         }
                     }
                            }
                        };
                        var results = service.RetrieveMultiple(associationsQuery).Entities;
                        tracingService.Trace($"{results.Count} & {min}");
                        if (results.Count < min)
                            throw new OutOfMinimumRangeException();
                    }
                    






                }
                catch (ValueException ex)
                {
                    throw new InvalidPluginExecutionException($"The minimum must be less than the maximum!");
                }
                catch (OutOfMinimumRangeException ex)
                {
                    throw new InvalidPluginExecutionException($"Not enough optional contents to follow minumum requirements!");
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }
        public static void DoAssociationJob(IServiceProvider serviceProvider)
        {
            var context = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));
            var serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
            IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);

            if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
            {
                Entity entity = (Entity)context.InputParameters["Target"];
                //find parent
                //find all required kids 
                //recalculate and update price

            }
        }
    }
    public class ValueException : Exception
    {

    }
    public class OutOfMinimumRangeException : Exception
    {

    }

    public class InvalidAssociationException : Exception
    {

    }
}