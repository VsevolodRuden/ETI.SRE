// <copyright file="PluginBase.cs" company="">
// Copyright (c) 2020 All Rights Reserved
// </copyright>
// <author></author>
// <date>19.10.2020 11:43:44</date>
// <summary>Implements the PluginBase Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;

namespace ETI.SRE.ProductsHistory
{
    /// <summary>
    /// Base class for all plug-in classes.
    /// </summary>    
    /// 
    
    public enum productEvent
    {
        update,
        delete
    }
    public class LogProductUpdateHistory : IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            HistoryLogger.DoJob(serviceProvider, productEvent.update);
        }
    }
    public class LogProductRemoveHistory : IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            HistoryLogger.DoJob(serviceProvider, productEvent.delete);
        }
    }





    public static class HistoryLogger
    {
        public static void DoJob(IServiceProvider serviceProvider, productEvent ev)
        {
             var tracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));
            var context = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));
            var serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
            IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);

            tracingService.Trace("entered historylogger");
            tracingService.Trace(context.MessageName);
            try
            {
                if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
                {
                    Entity entity = (Entity)context.InputParameters["Target"];
                    tracingService.Trace("atrs");
                    foreach (var atr in entity.Attributes.Keys)
                    {
                        tracingService.Trace(atr);
                    }

                    if (!entity.Attributes.ContainsKey("eti_productstate"))
                        throw new InvalidPluginExecutionException("WOLOLO");
                    tracingService.Trace("passed");

                    //entity = service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(new string[] { "eti_account", "eti_product" }));
                    switch (ev)
                    {
                        case productEvent.update:
                            tracingService.Trace("going update");
                            logUpdate(entity, service, context, tracingService);
                            break;
                        case productEvent.delete:
                            tracingService.Trace("going delete");
                            logDelete(entity, service, context, tracingService);
                            break;
                    }



                }
                else if(context.MessageName.ToLower() == "delete")
                {
                    tracingService.Trace("going delete");
                    logDelete(null, service, context, tracingService);
                }
            }
            catch (Exception ex)
            {
                throw new InvalidPluginExecutionException(ex.Message);
            }


        }
        private static void logCreate(Entity en, IOrganizationService service, IPluginExecutionContext context, ITracingService tracingServic)
        {
            try
            {
                Entity historyItem = new Entity("eti_productassignmenthistoryitem");
                historyItem["eti_newrate"] = en.Attributes["eti_rate"];
                historyItem["eti_newquantity"] = en.Attributes["eti_quantity"];
                historyItem["eti_newamount"] = new Money(en.GetAttributeValue<Money>("eti_rate").Value * en.GetAttributeValue<int>("eti_quantity"));
                historyItem["eti_newproduct"] = en.Attributes["eti_product"];
                historyItem["eti_operationdate"] = DateTime.Now;
                historyItem["eti_event"] = new OptionSetValue(964820000);
                historyItem["eti_user"] = new EntityReference("systemuser", context.InitiatingUserId);
                historyItem["eti_account"] = en.Attributes["eti_account"];
                service.Create(historyItem);
            }
            catch (Exception ex)
            {
                throw new InvalidPluginExecutionException(ex.Message);
            }
        }
        private static void logUpdate(Entity ent, IOrganizationService service, IPluginExecutionContext context, ITracingService tracingService)
        {
            try
            {
                //check current state
                //if not active -- return
                if (ent.GetAttributeValue<OptionSetValue>("eti_productstate").Value != 964820000)
                    return;

                Entity preImage = (Entity)context.PreEntityImages["preImage"];
                Entity en = (Entity)context.PostEntityImages["postImage"];
                //check previous state
                //if previous is pending add -- call another method
                tracingService.Trace("going check");
                if (preImage.GetAttributeValue<OptionSetValue>("eti_productstate").Value == 964820001)
                    logCreate(en, service, context, tracingService);
                else if (preImage.GetAttributeValue<OptionSetValue>("eti_productstate").Value == 964820002)
                {
                    tracingService.Trace("going populate");
                    Entity historyItem = new Entity("eti_productassignmenthistoryitem");
                    historyItem["eti_newrate"] = en.Attributes["eti_rate"];
                    historyItem["eti_rate"] = preImage.Attributes["eti_rate"];
                    historyItem["eti_newquantity"] = en.Attributes["eti_quantity"];
                    historyItem["eti_quantity"] = preImage.Attributes["eti_quantity"];
                    historyItem["eti_newamount"] = new Money(en.GetAttributeValue<Money>("eti_rate").Value * en.GetAttributeValue<int>("eti_quantity"));
                    historyItem["eti_amount"] = new Money(preImage.GetAttributeValue<Money>("eti_rate").Value * preImage.GetAttributeValue<int>("eti_quantity"));
                    historyItem["eti_operationdate"] = DateTime.Now;
                    historyItem["eti_event"] = new OptionSetValue(964820001);
                    historyItem["eti_user"] = new EntityReference("systemuser", context.InitiatingUserId);
                    historyItem["eti_account"] = en.Attributes["eti_account"];
                    if (preImage.GetAttributeValue<bool>("eti_productsswapped"))
                    {
                        en.Attributes["eti_productsswapped"] = false;
                        historyItem["eti_product"] = preImage.Attributes["eti_product"];
                        historyItem["eti_newproduct"] = en.Attributes["eti_product"];
                    }
                    else
                    {
                        historyItem["eti_product"] = en.Attributes["eti_product"];
                    }

                    tracingService.Trace("going create");
                    service.Create(historyItem);



                    //check previous values
                    //-----!!!!--------if there is a product to swap -- clear related field -------!!!!------
                }
                //if not any pending -- return
                else
                    return;

               
                
              
               

                    
                  

            }
            catch (Exception ex)
            {
                throw new InvalidPluginExecutionException(ex.Message);
            }
        }
        private static void logDelete(Entity ent, IOrganizationService service, IPluginExecutionContext context, ITracingService tracingService)
        {
            tracingService.Trace("going delete");
            Entity en = (Entity)context.PreEntityImages["preImage"];
            if (en.GetAttributeValue<OptionSetValue>("eti_productstate").Value != 964820003)
                return;
                try
            {
                Entity historyItem = new Entity("eti_productassignmenthistoryitem");
                historyItem["eti_rate"] = en.Attributes["eti_rate"];
                historyItem["eti_quantity"] = en.Attributes["eti_quantity"];
                historyItem["eti_amount"] = new Money(en.GetAttributeValue<Money>("eti_rate").Value * en.GetAttributeValue<int>("eti_quantity"));
                historyItem["eti_product"] = en.Attributes["eti_product"];
                historyItem["eti_operationdate"] = DateTime.Now;
                historyItem["eti_event"] = new OptionSetValue(964820002);
                historyItem["eti_user"] = new EntityReference("systemuser", context.InitiatingUserId);
                historyItem["eti_account"] = en.Attributes["eti_account"];
                service.Create(historyItem);
            }
            catch (Exception ex)
            {
                throw new InvalidPluginExecutionException(ex.Message);
            }
        }
    }
}